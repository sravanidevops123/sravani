---
- hosts: all
  become: yes
  vars:
    port: 8080
    tomcat_home_dir: "/opt/apache-tomcat-8.0.23"
  tasks:
    - name: Install openjdk8
      yum: name=java-1.8.0-openjdk state=present
      become: yes
    - name: Check tomcat exists or not
      stat:
        path: "{{ tomcat_home_dir }}"
      register: tomcatstatus
    
    - name: Debug message
      debug: msg="Path {{ tomcat_home_dir }} exists and is a directory"
      when: tomcatstatus.stat.exists
 
    - name: Debug message
      debug: msg="Path {{ tomcat_home_dir }} does not exists"
      when: not tomcatstatus.stat.exists
      
    - name: shutting down tomcat
      command: "nohup {{ tomcat_home_dir }}/bin/shutdown.sh" 
      when: tomcatstatus.stat.exists

    - name: wait for stop
      wait_for: port="{{ port }}" state=stopped
      when: tomcatstatus.stat.exists


    - name: remove old war file
      command: "rm -rf {{ tomcat_home_dir }}/webapps/vtdemo*" 
      when: tomcatstatus.stat.exists
      

    - name: Download tomcat 7
      get_url: url="https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.23/bin/apache-tomcat-8.0.23.tar.gz" dest="~/"
      when: not tomcatstatus.stat.exists

    - name: Copy war file to webapps
      command: "chown -R ec2-user:ec2-user /opt"
      become: yes

    - name: extract tomcat7
      unarchive:
        src: "~/apache-tomcat-8.0.23.tar.gz"
        dest: "/opt/"
        remote_src: yes
      when: not tomcatstatus.stat.exists




    - name: remove file tomcat.tar.gz
      file: path="~/apache-tomcat-8.0.23.tar.gz" state="absent"
    
    - name: remove logs temp and work
      command: "rm -rf work/* temp/* logs/*"
      args:
        chdir: "{{ tomcat_home_dir }}"
      
    - name: Copy war file to webapps
      copy: 
        src: "{{ item }}"
        dest: "{{ tomcat_home_dir }}/webapps"
      with_fileglob: "target/vtdemo.war"
      notify:
      - start tomcat
      - wait for start 
    

  handlers:
   - name: start tomcat
     command: "nohup {{ tomcat_home_dir }}/bin/startup.sh"
   - name: wait for start
     wait_for: port="{{ port }}" state=started
